FROM jenkins/jenkins
# this is a docker file to build jenkins image

# Necessary for lab but on production would be a different infra
USER root

# Copy JDK 17 and make available to be used  by jenkins
RUN mkdir -p ${JENKINS_HOME}/java 
RUN chown -R jenkins ${JENKINS_HOME}/java 
RUN chmod -R 777 ${JENKINS_HOME}/java
RUN cd ${JENKINS_HOME}/java/ 
RUN curl -o ${JENKINS_HOME}/java/jdk-17_linux-x64_bin.tar.gz https://download.oracle.com/java/17/archive/jdk-17_linux-x64_bin.tar.gz
RUN chown -R jenkins ${JENKINS_HOME}/java/jdk-17_linux-x64_bin.tar.gz
RUN chmod 777 ${JENKINS_HOME}/java/jdk-17_linux-x64_bin.tar.gz 
RUN tar xzvf ${JENKINS_HOME}/java/jdk-17_linux-x64_bin.tar.gz -C ${JENKINS_HOME}/java/

# Copy Maven and make available to be used by jenkins
RUN mkdir -p ${JENKINS_HOME}/maven
RUN chown -R jenkins ${JENKINS_HOME}/maven 
RUN chmod -R 777 ${JENKINS_HOME}/maven
RUN cd ${JENKINS_HOME}/maven/ 
RUN curl -o ${JENKINS_HOME}/maven/apache-maven-3.9.3-bin.tar.gz https://dlcdn.apache.org/maven/maven-3/3.9.3/binaries/apache-maven-3.9.3-bin.tar.gz 
RUN chown -R jenkins ${JENKINS_HOME}/maven/apache-maven-3.9.3-bin.tar.gz
RUN chmod 777 ${JENKINS_HOME}/maven/apache-maven-3.9.3-bin.tar.gz
RUN tar xzvf ${JENKINS_HOME}/maven/apache-maven-3.9.3-bin.tar.gz -C ${JENKINS_HOME}/maven/

# settings.xml that points to Jcenter
COPY settings-sec.xml ${JENKINS_HOME}/maven/apache-maven-3.9.3/conf/settings.xml

# add a job on jenkins that execute a pipeline thru script from pipeline job
RUN mkdir -p ${JENKINS_HOME}/jobs/petclinic-by-script
COPY config-script.xml ${JENKINS_HOME}/jobs/petclinic-by-script/config.xml

# add a job on jenkins that execute a pipeline thru jenkinsfile
RUN mkdir -p ${JENKINS_HOME}/jobs/petclinic-by-jenkinsfile
COPY config-repo.xml ${JENKINS_HOME}/jobs/petclinic-by-jenkinsfile/config.xml

# add a job on jenkins that execute a pipeline thru jenkinsfile
RUN mkdir -p ${JENKINS_HOME}/jobs/petclinic-by-jenkinsfile-sec
COPY config-repo-sec.xml ${JENKINS_HOME}/jobs/petclinic-by-jenkinsfile-sec/config.xml

# install the necessary plugins at Jenkins
RUN jenkins-plugin-cli --plugins docker-workflow:563.vd5d2e5c4007f
RUN jenkins-plugin-cli --plugins git-client:4.4.0
#RUN jenkins-plugin-cli --plugins pam-auth:1.10
RUN jenkins-plugin-cli --plugins workflow-aggregator:596.v8c21c963d92d
RUN jenkins-plugin-cli --plugins pipeline-github-lib:42.v0739460cda_c4
RUN jenkins-plugin-cli --plugins pipeline-stage-view:2.33
#RUN jenkins-plugin-cli --plugins ssh-slaves:2.877.v365f5eb_a_b_eec
#RUN jenkins-plugin-cli --plugins sshd:3.303.vefc7119b_ec23
RUN jenkins-plugin-cli --plugins timestamper:1.25
RUN jenkins-plugin-cli --plugins ws-cleanup:0.45
#RUN jenkins-plugin-cli --plugins artifactory:3.18.6
RUN jenkins-plugin-cli --plugins build-timeout:1.31
RUN jenkins-plugin-cli --plugins github-branch-source:1728.v859147241f49
 #RUN jenkins-plugin-cli --plugins jfrog:1.4.0
 #RUN jenkins-plugin-cli --plugins ldap:682.v7b_544c9d1512
 #RUN jenkins-plugin-cli --plugins matrix-auth:3.1.10
RUN jenkins-plugin-cli --plugins dependency-check-jenkins-plugin:5.4.0
RUN jenkins-plugin-cli --plugins jfrog:1.4.0

# DinD - Docker-in-Docker necessary configuration
RUN apt-get update
RUN apt-get install -y apt-transport-https ca-certificates curl software-properties-common
RUN curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
RUN echo "deb [signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
RUN apt-get update
RUN apt-get install -y docker.io 

# adding jenkins user permission but on production be different.
RUN usermod -aG docker jenkins 
RUN usermod -aG root jenkins 

# Entrypoint default for Jenkins
ENTRYPOINT ["/usr/local/bin/jenkins.sh"]
