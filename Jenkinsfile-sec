pipeline {
    agent any
    
    environment {
        // JDK installation path
        JAVA_HOME = '/var/jenkins_home/java/jdk-17'
        def DOCKER_IMAGE_NAME = "petclinic-pipeline-file-sec"
        def DOCKER_IMAGE_TAG = "latest"
        M2_HOME = "/var/jenkins_home/maven/apache-maven-3.9.3"
        JAR_FILE_NAME = ''
        def server = Artifactory.server 'myartifactory2'
        def buildInfo = Artifactory.newBuildInfo()
        def dockerRepository = 'docker_repo'
        def artifactoryUrl = 'http://192.168.1.147/artifactory/'
        DOCKER_HOST = 'tcp://host.docker.internal:2375'

    }
    tools {
            jfrog 'jfrog-cli'
        }

    stages {
        stage('Teste Artifactory') {
            steps
            {
                script
                {
                    def response = httpRequest(url: 'http://192.168.1.147/artifactory/api/system/ping')
                    if (response.status == 200)
                    {
                        echo "Artifactory is reachable! Response status code: ${response.status}"
                    } else
                    {
                        error "Failed to ping Artifactory. Response status code: ${response.status}"
                    }
                }
            }
        }
        stage('Clone Repository') {
            steps {
                git branch:'main', url: 'https://github.com/spring-projects/spring-petclinic'
            }
        }
        stage('External Pom.xml') {
            steps {
                dir('tmp_git_repo') {
                    // Clone repo in shallow mode
                    checkout([$class: 'GitSCM', branches: [[name: 'sec']],
                                                  userRemoteConfigs: [[url: 'https://github.com/mkj2399/pet_pipe']],
                                                  extensions: [[$class: 'CloneOption', depth: 1]]])
                    // Enable sparse checkout
                    sh 'git config core.sparseCheckout true'
                    // Specify the pom.xml file to grab
                    sh 'echo "pom-sec.xml" >> .git/info/sparse-checkout'
                    // Perform git checkout
                    sh 'git read-tree -mu HEAD'
                }
            }
        }
        stage('Check Pom.xml') {
            steps {
                sh '''
                if [ -f pom.xml ]; then
                    echo "pom.xml exists"
                else
                    echo "pom.xml does not exist"
                fi
                '''
            }
        }
        stage('Check Pom-sec') {
            steps {
                sh '''
                if [ -f tmp_git_repo/pom-sec.xml ]; then
                    echo "pom-sec.xml exists"
                else
                    echo "pom-sec.xml does not exist"
                fi
                '''
            }
        }
        stage('Compare files') {
            steps {
                sh '''
                pwd
                ls -la
                ls -la tmp_git_repo
                '''
                 // diff pom.xml tmp_git_repo/pom-sec.xml
            }
        }
        stage('Replace Pom') {
            steps {
                sh 'pwd' // Print the current working directory
                sh 'rm pom.xml'
                sh 'cp tmp_git_repo/pom-sec.xml pom.xml'
                sh 'ls -la'
            }
        }

        stage('Build') {
            steps {
                sh 'java --version'
                // package maven and skip test
                sh '${M2_HOME}/bin/mvn clean package -DskipTests -Dcheckstyle.failsOnError=false'
                script {
                    JAR_FILE_NAME = sh(returnStdout: true, script: 'ls target/*.jar').trim()
                }
            }
        }
        stage('Test') {
            steps {
                // sh "echo 'TESTCONTAINERS_REUSE_ENABLE=${env.TESTCONTAINERS_REUSE_ENABLE}' >> /tmp/testcontainers.properties"
                // sh "echo 'TESTCONTAINERS_REUSE_NETWORK=${env.TESTCONTAINERS_REUSE_NETWORK}' >> /tmp/testcontainers.properties"
                sh "echo 'DOCKER_HOST=${env.DOCKER_HOST}' >> /tmp/testcontainers.properties"

                // Test
                sh '${M2_HOME}/bin/mvn package test -Dtestcontainers.properties=/tmp/testcontainers.properties'
            }
        }
        stage('Docker Image Build') {
            steps {
                // Build docker image
                script {
                    dir('tmp_git_repo') {
                        // clone repo on shallow mode
                        git branch: 'sec', url: 'https://github.com/mkj2399/pet_pipe', shallow: true
                        // Grab a specific file
                        sh 'git config core.sparseCheckout true'
                        // grabbin dockerfile
                        sh 'echo "Dockerfile-petclinic" >> .git/info/sparse-checkout'
                        sh 'echo "docker-compose-mysql.yml" >> .git/info/sparse-checkout'
                        sh 'echo "docker-compose-file-sec.yml" >> .git/info/sparse-checkout'
                        // git checkout
                        sh 'git read-tree -mu HEAD'
                    }
                    sh 'cp tmp_git_repo/Dockerfile-petclinic-sec Dockerfile'
                    sh 'cp tmp_git_repo/docker-compose-mysql.yml docker-compose-mysql.yml'
                    sh 'cp tmp_git_repo/docker-compose-file-sec.yml docker-compose-file-sec.yml'
                    //sh './mvnw spring-boot:build-image'
                    dockerImage = docker.build("${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}", "--build-arg=JAR_FILE=${JAR_FILE_NAME} .")
                }
            }
        }

        stage('Load and Scan Container') {
            steps {
                 script {
                         sh 'docker-compose -f docker-compose-mysql.yml up -d'
                         jf rt ping
                         jf docker scan 'mysql:8.0'
                         sleep(40)
                         sh 'docker-compose -f docker-compose-file-sec.yml up -d'
                         jf docker scan petclinic-pipeline-file-sec:latest

                 }
            }
        }
    }
}
