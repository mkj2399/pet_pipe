pipeline {
    agent any
    
    environment {
        // JDK installation path
        JAVA_HOME = '/var/jenkins_home/java/jdk-17'
        DOCKER_IMAGE_NAME = "petclinic-pipeline-file-sec"
        DOCKER_IMAGE_TAG = "latest"
        M2_HOME = "/var/jenkins_home/maven/apache-maven-3.9.3"
        JAR_FILE_NAME = ''
    }

    stages {
        stage('Artifactory configuration') {
                    steps {
                        script {
                            def server = Artifactory.server 'myartifactory2'
                        }
                    }
        }
        stage('Clone Repository') {
            steps {
                git branch:'main', url: 'https://github.com/spring-projects/spring-petclinic'
            }
        }
        stage('Prepare POM.XML') {
            steps {
                sh '''
                sed -i 's|<module name="NoHttp"/>|<!-- <module name="NoHttp"/> -->|' src/checkstyle/nohttp-checkstyle.xml
                '''
            }
        }
        stage('Build') {
            steps {
                sh 'java --version'
                // package maven and skip test
                sh '${M2_HOME}/bin/mvn clean package -DskipTests -Dcheckstyle.failsOnError=false'
                script {
                    JAR_FILE_NAME = sh(returnStdout: true, script: 'ls target/*.jar').trim()
                }
            }
        }
        stage('Test') {
            steps {
                // Test
                sh '${M2_HOME}/bin/mvn package test'
            }
        }
        stage('Docker Image Build') {
            steps {
                // Build docker image
                script {
                    dir('tmp_git_repo') {
                        // clone repo on shallow mode
                        git branch: 'sec', url: 'https://github.com/mkj2399/pet_pipe', shallow: true
                        // Grab a specific file
                        sh 'git config core.sparseCheckout true'
                        // grabbin dockerfile
                        sh 'echo "Dockerfile-petclinic" >> .git/info/sparse-checkout'
                        // git checkout
                        sh 'git read-tree -mu HEAD'
                    }
                    sh 'cp tmp_git_repo/Dockerfile-petclinic-sec Dockerfile'
                    //sh './mvnw spring-boot:build-image'
                    dockerImage = docker.build("${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}", "--build-arg=JAR_FILE=${JAR_FILE_NAME} .")
                }
            }
        }
        stage('Push Docker image to Artifactory') {
            steps {
                 script {
                            def rtDocker = Artifactory.docker server: server
                            def buildInfo = Artifactory.newBuildInfo()
                            rtDocker.push('my-spring-petclinic-sec:latest', 'docker_repo', buildInfo)
                            server.publishBuildInfo buildInfo
                 }
            }
        }

        stage('Container Scanning') {
            steps {
                 script {
                         def buildInfo = Artifactory.newBuildInfo()
                         def xrayScanConfig = [
                            'buildName'      : buildInfo.name,
                            'buildNumber'    : buildInfo.number,
                            'context'        : 'my-spring-petclinic-sec', // Provide your context here
                            'failBuild'      : false
                         ]
                 server.xrayScan xrayScanConfig

                 }
            }
        }
    }
}
